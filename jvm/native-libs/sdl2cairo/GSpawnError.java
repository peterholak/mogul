/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sdl2cairo;

public final class GSpawnError {
  public final static GSpawnError G_SPAWN_ERROR_FORK = new GSpawnError("G_SPAWN_ERROR_FORK");
  public final static GSpawnError G_SPAWN_ERROR_READ = new GSpawnError("G_SPAWN_ERROR_READ");
  public final static GSpawnError G_SPAWN_ERROR_CHDIR = new GSpawnError("G_SPAWN_ERROR_CHDIR");
  public final static GSpawnError G_SPAWN_ERROR_ACCES = new GSpawnError("G_SPAWN_ERROR_ACCES");
  public final static GSpawnError G_SPAWN_ERROR_PERM = new GSpawnError("G_SPAWN_ERROR_PERM");
  public final static GSpawnError G_SPAWN_ERROR_TOO_BIG = new GSpawnError("G_SPAWN_ERROR_TOO_BIG");
  public final static GSpawnError G_SPAWN_ERROR_2BIG = new GSpawnError("G_SPAWN_ERROR_2BIG", pangoJNI.G_SPAWN_ERROR_2BIG_get());
  public final static GSpawnError G_SPAWN_ERROR_NOEXEC = new GSpawnError("G_SPAWN_ERROR_NOEXEC");
  public final static GSpawnError G_SPAWN_ERROR_NAMETOOLONG = new GSpawnError("G_SPAWN_ERROR_NAMETOOLONG");
  public final static GSpawnError G_SPAWN_ERROR_NOENT = new GSpawnError("G_SPAWN_ERROR_NOENT");
  public final static GSpawnError G_SPAWN_ERROR_NOMEM = new GSpawnError("G_SPAWN_ERROR_NOMEM");
  public final static GSpawnError G_SPAWN_ERROR_NOTDIR = new GSpawnError("G_SPAWN_ERROR_NOTDIR");
  public final static GSpawnError G_SPAWN_ERROR_LOOP = new GSpawnError("G_SPAWN_ERROR_LOOP");
  public final static GSpawnError G_SPAWN_ERROR_TXTBUSY = new GSpawnError("G_SPAWN_ERROR_TXTBUSY");
  public final static GSpawnError G_SPAWN_ERROR_IO = new GSpawnError("G_SPAWN_ERROR_IO");
  public final static GSpawnError G_SPAWN_ERROR_NFILE = new GSpawnError("G_SPAWN_ERROR_NFILE");
  public final static GSpawnError G_SPAWN_ERROR_MFILE = new GSpawnError("G_SPAWN_ERROR_MFILE");
  public final static GSpawnError G_SPAWN_ERROR_INVAL = new GSpawnError("G_SPAWN_ERROR_INVAL");
  public final static GSpawnError G_SPAWN_ERROR_ISDIR = new GSpawnError("G_SPAWN_ERROR_ISDIR");
  public final static GSpawnError G_SPAWN_ERROR_LIBBAD = new GSpawnError("G_SPAWN_ERROR_LIBBAD");
  public final static GSpawnError G_SPAWN_ERROR_FAILED = new GSpawnError("G_SPAWN_ERROR_FAILED");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static GSpawnError swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + GSpawnError.class + " with value " + swigValue);
  }

  private GSpawnError(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private GSpawnError(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private GSpawnError(String swigName, GSpawnError swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static GSpawnError[] swigValues = { G_SPAWN_ERROR_FORK, G_SPAWN_ERROR_READ, G_SPAWN_ERROR_CHDIR, G_SPAWN_ERROR_ACCES, G_SPAWN_ERROR_PERM, G_SPAWN_ERROR_TOO_BIG, G_SPAWN_ERROR_2BIG, G_SPAWN_ERROR_NOEXEC, G_SPAWN_ERROR_NAMETOOLONG, G_SPAWN_ERROR_NOENT, G_SPAWN_ERROR_NOMEM, G_SPAWN_ERROR_NOTDIR, G_SPAWN_ERROR_LOOP, G_SPAWN_ERROR_TXTBUSY, G_SPAWN_ERROR_IO, G_SPAWN_ERROR_NFILE, G_SPAWN_ERROR_MFILE, G_SPAWN_ERROR_INVAL, G_SPAWN_ERROR_ISDIR, G_SPAWN_ERROR_LIBBAD, G_SPAWN_ERROR_FAILED };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

